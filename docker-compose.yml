version: '3.9'

services:
  postgres:
    container_name: postgres
    image: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRESQL_NAME}
      POSTGRES_USER: ${POSTGRESQL_USER}
      POSTGRES_PASSWORD: ${POSTGRESQL_PASS}
    ports:
      - ${POSTGRESQL_PORT}:${DEFAULT_POSTGRES_PORT}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U ${POSTGRESQL_USER} -d ${POSTGRESQL_PASS}'"
        ]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - cownetwork
  keycloak:
    depends_on:
      postgres:
        condition: service_healthy
    container_name: keycloak
    image: bitnami/keycloak
    ports:
      - ${KEYCLOAK_PORT}:${DEFAULT_KEYCLOAK_PORT}
    environment:
      KEYCLOAK_ADMIN_USER: ${KEYCLOAK_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_PASSWORD}

      KEYCLOAK_DATABASE_HOST: ${POSTGRESQL_HOST}
      KEYCLOAK_DATABASE_PORT: ${DEFAULT_POSTGRES_PORT}
      KEYCLOAK_DATABASE_NAME: ${POSTGRESQL_NAME}
      KEYCLOAK_DATABASE_USER: ${POSTGRESQL_USER}
      KEYCLOAK_DATABASE_PASSWORD: ${POSTGRESQL_PASS}
      KEYCLOAK_ENABLE_STATISTICS: true
      KEYCLOAK_ENABLE_HEALTH_ENDPOINTS: true
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://keycloak:${DEFAULT_KEYCLOAK_PORT}/health/ready"
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    networks:
      - cownetwork
  api:
    depends_on:
      keycloak:
        condition: service_healthy
    container_name: ${APPLICATION_NAME}_api_${SCOPE}
    image: ${REPOSITORY}/${APPLICATION_NAME}_api:${SCOPE}
    environment:
      CONFIG_DIR: /app
      SCOPE: ${SCOPE}
      PORT: ${DEFAULT_API_PORT}
      KEYCLOAK_SECRET: ${KEYCLOAK_SECRET}
      GIN_MODE: release
    build:
      context: .
      args:
        - SCOPE=${SCOPE}
      dockerfile: ./Dockerfile
    ports:
      - ${API_PORT}:${DEFAULT_API_PORT}
    restart: always
    networks:
      - cownetwork
volumes:
  postgres-data:


networks:
  cownetwork:
    external: true
